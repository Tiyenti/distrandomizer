# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ created ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
        #with:
        #  vs-version: "[15.0,16.9)"
        
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5
    
      - name: Restore NuGet packages
        run: nuget restore DistanceRando-Spectrum.sln
        
      #- name: Generate/update version from commit/tag data
      #  id: versionnum
      #  run: echo "::set-output name=version::$(./Build` Scripts/version.ps1)"

      - name: Obtain info for versioning
        id: versioninfo
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=branch::$(git branch --show-current)"
      
      - name: Generate VersionNumber.cs prior to build
        id: genversion
        run: |
          if ($env:GITHUB_EVENT_NAME -eq "push")
          {
            $codeversion = "${{ steps.versioninfo.outputs.branch }}-${{ steps.versioninfo.outputs.sha_short }}"
            $version = $codeversion
          }
          elseif ($env:GITHUB_EVENT_NAME -eq "pull_request")
          {
            $codeversion = "pr${{ github.event.pull_request.number }}-${{ steps.versioninfo.outputs.sha_short }}"
            $version = $codeversion
          }
          elseif ($env:GITHUB_EVENT_NAME -eq "release")
          {
            $version = "${{ github.event.release.tag_name }}"
            $codeversion = $version.Substring(1)
          }
          else
          {
            $codeversion = "autoversioning-broke"
            $version = $codeversion
          }
          echo "::set-output name=version::$(echo $version)"
          $output = "namespace DistanceRando { internal static partial class Metadata { public const string RandomizerVersion = `"$codeversion`"; } }"
          $outputfile = "./DistanceRando-Spectrum/VersionNumber.cs"
          Write-Output $output | Out-File -Encoding utf8 -FilePath $outputfile

      - name: Build solution
        run: msbuild DistanceRando-Spectrum.sln /p:BuiltOnCI=true

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: DistanceRando-${{ steps.genversion.outputs.version }}
          path: Build

      - name: Generate zipped file for release
        if: ${{ github.event_name == 'release' }}
        run: Compress-Archive Build/DistanceRando "DistanceRando-${{ steps.genversion.outputs.version }}.zip"

      - name: Upload release asset
        if: ${{ github.event_name == 'release' }}
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: DistanceRando-${{ steps.genversion.outputs.version }}.zip